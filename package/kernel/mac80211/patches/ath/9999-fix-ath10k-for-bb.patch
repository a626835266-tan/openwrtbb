--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@ -8282,109 +8282,6 @@
 	return arvif_iter.arvif;
 }
 
-#define WRD_METHOD "WRDD"
-#define WRDD_WIFI  (0x07)
-
-static u32 ath10k_mac_wrdd_get_mcc(struct ath10k *ar, union acpi_object *wrdd)
-{
-	union acpi_object *mcc_pkg;
-	union acpi_object *domain_type;
-	union acpi_object *mcc_value;
-	u32 i;
-
-	if (wrdd->type != ACPI_TYPE_PACKAGE ||
-	    wrdd->package.count < 2 ||
-	    wrdd->package.elements[0].type != ACPI_TYPE_INTEGER ||
-	    wrdd->package.elements[0].integer.value != 0) {
-		ath10k_warn(ar, "ignoring malformed/unsupported wrdd structure\n");
-		return 0;
-	}
-
-	for (i = 1; i < wrdd->package.count; ++i) {
-		mcc_pkg = &wrdd->package.elements[i];
-
-		if (mcc_pkg->type != ACPI_TYPE_PACKAGE)
-			continue;
-		if (mcc_pkg->package.count < 2)
-			continue;
-		if (mcc_pkg->package.elements[0].type != ACPI_TYPE_INTEGER ||
-		    mcc_pkg->package.elements[1].type != ACPI_TYPE_INTEGER)
-			continue;
-
-		domain_type = &mcc_pkg->package.elements[0];
-		if (domain_type->integer.value != WRDD_WIFI)
-			continue;
-
-		mcc_value = &mcc_pkg->package.elements[1];
-		return mcc_value->integer.value;
-	}
-	return 0;
-}
-
-static int ath10k_mac_get_wrdd_regulatory(struct ath10k *ar, u16 *rd)
-{
-	struct pci_dev __maybe_unused *pdev = to_pci_dev(ar->dev);
-	acpi_handle root_handle;
-	acpi_handle handle;
-	struct acpi_buffer wrdd = {ACPI_ALLOCATE_BUFFER, NULL};
-	acpi_status status;
-	u32 alpha2_code;
-	char alpha2[3];
-
-	root_handle = ACPI_HANDLE(&pdev->dev);
-	if (!root_handle)
-		return -EOPNOTSUPP;
-
-	status = acpi_get_handle(root_handle, (acpi_string)WRD_METHOD, &handle);
-	if (ACPI_FAILURE(status)) {
-		ath10k_dbg(ar, ATH10K_DBG_BOOT,
-			   "failed to get wrd method %d\n", status);
-		return -EIO;
-	}
-
-	status = acpi_evaluate_object(handle, NULL, NULL, &wrdd);
-	if (ACPI_FAILURE(status)) {
-		ath10k_dbg(ar, ATH10K_DBG_BOOT,
-			   "failed to call wrdc %d\n", status);
-		return -EIO;
-	}
-
-	alpha2_code = ath10k_mac_wrdd_get_mcc(ar, wrdd.pointer);
-	kfree(wrdd.pointer);
-	if (!alpha2_code)
-		return -EIO;
-
-	alpha2[0] = (alpha2_code >> 8) & 0xff;
-	alpha2[1] = (alpha2_code >> 0) & 0xff;
-	alpha2[2] = '\0';
-
-	ath10k_dbg(ar, ATH10K_DBG_BOOT,
-		   "regulatory hint from WRDD (alpha2-code): %s\n", alpha2);
-
-	*rd = ath_regd_find_country_by_name(alpha2);
-	if (*rd == 0xffff)
-		return -EIO;
-
-	*rd |= COUNTRY_ERD_FLAG;
-	return 0;
-}
-
-static int ath10k_mac_init_rd(struct ath10k *ar)
-{
-	int ret;
-	u16 rd;
-
-	ret = ath10k_mac_get_wrdd_regulatory(ar, &rd);
-	if (ret) {
-		ath10k_dbg(ar, ATH10K_DBG_BOOT,
-			   "fallback to eeprom programmed regulatory settings\n");
-		rd = ar->hw_eeprom_rd;
-	}
-
-	ar->ath_common.regulatory.current_rd = rd;
-	return 0;
-}
-
 #ifdef CPTCFG_MAC80211_LEDS
 static const struct ieee80211_tpt_blink ath10k_tpt_blink[] = {
 	{ .throughput = 0 * 1024, .blink_time = 334 },
@@ -8646,12 +8543,6 @@
 			ath10k_warn(ar, "failed to initialise DFS pattern detector\n");
 	}
 
-	ret = ath10k_mac_init_rd(ar);
-	if (ret) {
-		ath10k_err(ar, "failed to derive regdom: %d\n", ret);
-		goto err_dfs_detector_exit;
-	}
-
 	/* Disable set_coverage_class for chipsets that do not support it. */
 	if (!ar->hw_params.hw_ops->set_coverage_class)
 		ar->ops->set_coverage_class = NULL;
