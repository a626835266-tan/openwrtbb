--- a/iwinfo.c	2019-09-06 19:13:54.000000000 +0800
+++ b/iwinfo.c	2019-09-05 17:32:03.000000000 +0800
@@ -21,11 +21,6 @@
 #include <libubus.h>
 #include <iwinfo.h>
 #include <iwinfo/utils.h>
-#include <net/ethernet.h>
-
-#ifdef linux
-#include <netinet/ether.h>
-#endif
 
 #include <rpcd/plugin.h>
 
@@ -43,37 +38,6 @@
 	[RPC_D_DEVICE] = { .name = "device", .type = BLOBMSG_TYPE_STRING },
 };
 
-enum {
-	RPC_A_DEVICE,
-	RPC_A_MACADDR,
-	__RPC_A_MAX,
-};
-
-static const struct blobmsg_policy rpc_assoclist_policy[__RPC_A_MAX] = {
-	[RPC_A_DEVICE] = { .name = "device", .type = BLOBMSG_TYPE_STRING },
-	[RPC_A_MACADDR] = { .name = "mac", .type = BLOBMSG_TYPE_STRING },
-};
-
-enum {
-	RPC_U_SECTION,
-	__RPC_U_MAX
-};
-
-static const struct blobmsg_policy rpc_uci_policy[__RPC_U_MAX] = {
-	[RPC_U_SECTION] = { .name = "section", .type = BLOBMSG_TYPE_STRING },
-};
-
-static int
-__rpc_iwinfo_open(struct blob_attr *device)
-{
-	if (!device)
-		return UBUS_STATUS_INVALID_ARGUMENT;
-
-	ifname = blobmsg_data(device);
-	iw = iwinfo_backend(ifname);
-
-	return iw ? UBUS_STATUS_OK : UBUS_STATUS_NOT_FOUND;
-}
 
 static int
 rpc_iwinfo_open(struct blob_attr *msg)
@@ -83,7 +47,13 @@
 	blobmsg_parse(rpc_device_policy, __RPC_D_MAX, tb,
 	              blob_data(msg), blob_len(msg));
 
-	return __rpc_iwinfo_open(tb[RPC_D_DEVICE]);
+	if (!tb[RPC_D_DEVICE])
+		return UBUS_STATUS_INVALID_ARGUMENT;
+
+	ifname = blobmsg_data(tb[RPC_D_DEVICE]);
+	iw = iwinfo_backend(ifname);
+
+	return iw ? UBUS_STATUS_OK : UBUS_STATUS_NOT_FOUND;
 }
 
 static void
@@ -227,41 +197,6 @@
 }
 
 static void
-rpc_iwinfo_call_htmodes(const char *name)
-{
-	int modes;
-	void *c;
-
-	if (!iw->htmodelist(ifname, &modes))
-	{
-		c = blobmsg_open_array(&buf, name);
-
-		if (modes & IWINFO_HTMODE_HT20)
-			blobmsg_add_string(&buf, NULL, "HT20");
-
-		if (modes & IWINFO_HTMODE_HT40)
-			blobmsg_add_string(&buf, NULL, "HT40");
-
-		if (modes & IWINFO_HTMODE_VHT20)
-			blobmsg_add_string(&buf, NULL, "VHT20");
-
-		if (modes & IWINFO_HTMODE_VHT40)
-			blobmsg_add_string(&buf, NULL, "VHT40");
-
-		if (modes & IWINFO_HTMODE_VHT80)
-			blobmsg_add_string(&buf, NULL, "VHT80");
-
-		if (modes & IWINFO_HTMODE_VHT80_80)
-			blobmsg_add_string(&buf, NULL, "VHT80+80");
-
-		if (modes & IWINFO_HTMODE_VHT160)
-			blobmsg_add_string(&buf, NULL, "VHT160");
-
-		blobmsg_close_array(&buf, c);
-	}
-}
-
-static void
 rpc_iwinfo_call_hwmodes(const char *name)
 {
 	int modes;
@@ -271,9 +206,6 @@
 	{
 		c = blobmsg_open_array(&buf, name);
 
-		if (modes & IWINFO_80211_AC)
-			blobmsg_add_string(&buf, NULL, "ac");
-
 		if (modes & IWINFO_80211_A)
 			blobmsg_add_string(&buf, NULL, "a");
 
@@ -338,7 +270,6 @@
 	rpc_iwinfo_call_int("bitrate", iw->bitrate, NULL);
 
 	rpc_iwinfo_call_encryption("encryption");
-	rpc_iwinfo_call_htmodes("htmodes");
 	rpc_iwinfo_call_hwmodes("hwmodes");
 
 	c = blobmsg_open_table(&buf, "hardware");
@@ -421,36 +352,23 @@
 	char mac[18];
 	char res[IWINFO_BUFSIZE];
 	struct iwinfo_assoclist_entry *a;
-	struct ether_addr *macaddr = NULL;
 	void *c, *d, *e;
-	struct blob_attr *tb[__RPC_A_MAX];
-	bool found = false;
 
-	blobmsg_parse(rpc_assoclist_policy, __RPC_A_MAX, tb,
-	              blob_data(msg), blob_len(msg));
+	rv = rpc_iwinfo_open(msg);
 
-	rv = __rpc_iwinfo_open(tb[RPC_A_DEVICE]);
 	if (rv)
 		return rv;
 
-	if (tb[RPC_A_MACADDR])
-		macaddr = ether_aton(blobmsg_data(tb[RPC_A_MACADDR]));
-
 	blob_buf_init(&buf, 0);
 
-	if (!macaddr)
-		c = blobmsg_open_array(&buf, "results");
+	c = blobmsg_open_array(&buf, "results");
 
 	if (!iw->assoclist(ifname, res, &len) && (len > 0))
 	{
 		for (i = 0; i < len; i += sizeof(struct iwinfo_assoclist_entry))
 		{
 			a = (struct iwinfo_assoclist_entry *)&res[i];
-
-			if (!macaddr)
-				d = blobmsg_open_table(&buf, NULL);
-			else if (memcmp(macaddr, a->mac, ETH_ALEN) != 0)
-				continue;
+			d = blobmsg_open_table(&buf, NULL);
 
 			snprintf(mac, sizeof(mac), "%02X:%02X:%02X:%02X:%02X:%02X",
 					 a->mac[0], a->mac[1], a->mac[2],
@@ -475,18 +393,11 @@
 			blobmsg_add_u8(&buf, "short_gi", a->tx_rate.is_short_gi);
 			blobmsg_close_table(&buf, e);
 
-			found = true;
-			if (!macaddr)
-				blobmsg_close_table(&buf, d);
-			else
-				break;
+			blobmsg_close_table(&buf, d);
 		}
 	}
 
-	if (!macaddr)
-		blobmsg_close_array(&buf, c);
-	else if (!found)
-		return UBUS_STATUS_NOT_FOUND;
+	blobmsg_close_array(&buf, c);
 
 	ubus_send_reply(ctx, req, buf.head);
 
@@ -624,7 +535,7 @@
 	int rv, len;
 	char cur[3];
 	char iso3166[3];
-	char res[IWINFO_BUFSIZE] = {0};
+	char res[IWINFO_BUFSIZE];
 	const char *ccode;
 	const struct iwinfo_iso3166_label *l;
 	void *c, *d;
@@ -677,55 +588,6 @@
 }
 
 static int
-rpc_iwinfo_phyname(struct ubus_context *ctx, struct ubus_object *obj,
-                   struct ubus_request_data *req, const char *method,
-                   struct blob_attr *msg)
-{
-	int i;
-	bool found = false;
-	char res[IWINFO_BUFSIZE];
-	const struct iwinfo_ops *ops;
-	struct blob_attr *tb[__RPC_U_MAX];
-	const char *backends[] = {
-		"nl80211",
-		"madwifi",
-		"wl"
-	};
-
-	blobmsg_parse(rpc_uci_policy, __RPC_U_MAX, tb,
-	              blob_data(msg), blob_len(msg));
-
-	if (!tb[RPC_U_SECTION])
-		return UBUS_STATUS_INVALID_ARGUMENT;
-
-	for (i = 0; i < ARRAY_SIZE(backends); i++)
-	{
-		ops = iwinfo_backend_by_name(backends[i]);
-
-		if (!ops || !ops->lookup_phy)
-			continue;
-
-		if (!ops->lookup_phy(blobmsg_get_string(tb[RPC_U_SECTION]), res))
-		{
-			found = true;
-			break;
-		}
-	}
-
-	if (found)
-	{
-		blob_buf_init(&buf, 0);
-		blobmsg_add_string(&buf, "phyname", res);
-
-		ubus_send_reply(ctx, req, buf.head);
-	}
-
-	rpc_iwinfo_close();
-
-	return found ? UBUS_STATUS_OK : UBUS_STATUS_NOT_FOUND;
-}
-
-static int
 rpc_iwinfo_devices(struct ubus_context *ctx, struct ubus_object *obj,
                    struct ubus_request_data *req, const char *method,
                    struct blob_attr *msg)
@@ -768,14 +630,13 @@
 rpc_iwinfo_api_init(const struct rpc_daemon_ops *o, struct ubus_context *ctx)
 {
 	static const struct ubus_method iwinfo_methods[] = {
-		UBUS_METHOD_NOARG("devices", rpc_iwinfo_devices),
+		{ .name = "devices", .handler = rpc_iwinfo_devices },
 		UBUS_METHOD("info",        rpc_iwinfo_info,        rpc_device_policy),
 		UBUS_METHOD("scan",        rpc_iwinfo_scan,        rpc_device_policy),
-		UBUS_METHOD("assoclist",   rpc_iwinfo_assoclist,   rpc_assoclist_policy),
+		UBUS_METHOD("assoclist",   rpc_iwinfo_assoclist,   rpc_device_policy),
 		UBUS_METHOD("freqlist",    rpc_iwinfo_freqlist,    rpc_device_policy),
 		UBUS_METHOD("txpowerlist", rpc_iwinfo_txpowerlist, rpc_device_policy),
 		UBUS_METHOD("countrylist", rpc_iwinfo_countrylist, rpc_device_policy),
-		UBUS_METHOD("phyname",     rpc_iwinfo_phyname,     rpc_uci_policy),
 	};
 
 	static struct ubus_object_type iwinfo_type =
